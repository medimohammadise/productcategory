buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.owasp:dependency-check-gradle:${owasp_plugin_version}"
	}
}
plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'java-library'
	id 'com.gorylenko.gradle-git-properties'
	id 'com.github.ben-manes.versions'
	id "com.github.sherter.google-java-format"
	id "org.liquibase.gradle" version "2.1.1"
	id "org.sonarqube" apply false
}
apply from: "gradle/code-quality.gradle"
if (project.hasProperty("ci")) {
	apply from: "gradle/owasp.gradle"
}

group = 'com.ecanteen'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		resolutionStrategy {
			// Inherited version from Spring Boot can't be used because of regressions:
			// To be removed as soon as spring-boot use the same version
			force 'org.liquibase:liquibase-core:4.6.1'
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}
ext {
	set('testcontainersVersion', "1.16.0")
	set('testKeycloakVersion', "1.8.1")
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.7.1'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	//implementation "io.awspring.cloud:spring-cloud-aws-autoconfigure:${spring_cloud_aws_version}"
	//implementation "io.awspring.cloud:spring-cloud-aws-messaging:${spring_cloud_aws_version}"
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.liquibase:liquibase-core'
	liquibaseRuntime "org.postgresql:postgresql"
	liquibaseRuntime "org.liquibase:liquibase-core"
	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.14.0'
	liquibaseRuntime sourceSets.main.compileClasspath
	implementation "org.springdoc:springdoc-openapi-ui:${springdoc_openapi_version}"
	implementation "org.zalando:problem-spring-web-starter:${problem_spring_web_version}"
	implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
	implementation "commons-io:commons-io:${commons_io_version}"
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.4.0'
	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.projectlombok:lombok"
	testImplementation "org.awaitility:awaitility:${awaitility_version}"
	testImplementation "org.testcontainers:junit-jupiter"
	testImplementation "org.testcontainers:postgresql"
	testImplementation "org.testcontainers:localstack"
	testImplementation "org.springframework.security:spring-security-test"
	testImplementation "org.springframework.boot:spring-boot-test"
	testImplementation group: 'io.quarkus', name: 'quarkus-junit5', version: '2.10.1.Final'
	testImplementation "com.h2database:h2"
	implementation group: 'io.swagger', name: 'swagger-core', version: '1.6.1'

	testImplementation group: 'com.h2database', name: 'h2', version: '1.3.148'



	//testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
//    testImplementation "com.github.dasniko:testcontainers-keycloak:2.2.2"
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
   //implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
  // implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

}
project.ext.diffChangelogFile = "src/main/resources/db/migration/changelog/" + new Date().format("yyyyMMddHHmmss") + "liquibase-changelog.xml"

liquibase {
	activities {
		main {
			driver "org.postgresql.Driver"
			url "jdbc:postgresql://localhost:5432/schooldb"
			username "school-user"
			password "secret"
			changeLogFile "src/main/resources/db.changelog/changelog-master.xml"
			defaultSchemaName ""
			logLevel "debug"
			classpath "src/main/resources/"
		}
		diffLog {
			driver "org.postgresql.Driver"
			url "jdbc:postgresql://localhost:5432/schooldb"
			username "school-user"
			password "secret"
			changeLogFile project.ext.diffChangelogFile
			referenceUrl "hibernate:spring:com.mycompany.myapp.domain?dialect=tech.jhipster.domain.util.FixedPostgreSQL10Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
			defaultSchemaName ""
			logLevel "debug"
			classpath "$buildDir/classes/java/main"
			excludeObjects "oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token"
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainers_version}"
	}
}

defaultTasks "bootRun"

springBoot {
	buildInfo()
}

bootJar {
	//launchScript()
}

bootBuildImage {
	imageName = "DOCKER_USERNAME/e-canteen-backend"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

if (project.hasProperty("local")) {
	bootRun {
		args = ["--spring.profiles.active=local"]
	}
}

gitProperties {
	failOnNoGitDirectory = false
	keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

googleJavaFormat {
	toolVersion = '1.15.0'
	options style: 'AOSP'
}

check.dependsOn verifyGoogleJavaFormat

test {
	useJUnitPlatform()
	exclude "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
	testLogging {
		events = ["PASSED", "FAILED", "SKIPPED"]
		showStandardStreams = true
		exceptionFormat = "full"
	}
}

task integrationTest(type: Test) {
	useJUnitPlatform()

	include "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
	shouldRunAfter test

	testLogging {
		events = ["PASSED", "FAILED", "SKIPPED"]
		showStandardStreams = true
		exceptionFormat = "full"
	}
}

check.dependsOn integrationTest

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn test
}

task integrationTestReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn integrationTest
}
